<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-18T12:33:09-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">TBD</title><subtitle>Documenting the journey of a new apprentice @ 8th Light
</subtitle><author><name>Christopher Manahan</name></author><entry><title type="html">Experimenting with the Single Responsibility Principle</title><link href="http://localhost:4000/2018/10/17/experimenting-with-the-single-responsibility-principle.html" rel="alternate" type="text/html" title="Experimenting with the Single Responsibility Principle" /><published>2018-10-17T00:00:00-04:00</published><updated>2018-10-17T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/17/experimenting-with-the-single-responsibility-principle</id><content type="html" xml:base="http://localhost:4000/2018/10/17/experimenting-with-the-single-responsibility-principle.html">&lt;p&gt;When we want to probe the real world to understand how it works we often rely on instruments that can measure with a precision that far exceeds our own subjective capabilities. We use thermometers to ascertain a numeric representation of what we would term hot or cold. When developing software we have a tool that allows us to probe our code to understand how it works. This tool is unit testing.&lt;/p&gt;

&lt;h3 id=&quot;experimental-control&quot;&gt;Experimental Control&lt;/h3&gt;

&lt;p&gt;Making good, reliable measurements requires a certain level of control over the environment in which the measurement is made. When we use a thermometer to measure the temperature of some system we expect that if the quantity we are measuring has no reason to change that our instrument should give us the same results repeatedly. In this scenario we rely on the systems ability to hold other factors like the pressure and volume constant, so that we can be sure that our result is true and replicatable.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;quick-aside-temperature-pressure-and-volume-are-seperate-quantities-that-nonetheless-affect-on-one-another&quot;&gt;Quick Aside: Temperature, Pressure, and Volume are seperate quantities that nonetheless affect on one another.&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, if our system was not designed with the single responsibility of managing heat but was also responsible for managing pressure, painful implications become apparent if we ever decide to change how the system manages these quantities. If we asked our system to accept and manage a certain amount of heat, and we have left the mechanisms by which it does so intact, we would expect a measurement now to be the same as a measurement later. However, if without our knowledge someone (or a naive version of us at a different time) changed the mechanisms that manage the pressure of the system in between measurements our thermometer would show us two completely different temperatures. This crisis of measurement has multiple implications that are important to consider when designing systems.&lt;/p&gt;

&lt;h3 id=&quot;unit-tests-and-srp&quot;&gt;Unit Tests and SRP&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Changes to one responsibility may impair or inhibit the class’ ability to meet the others.
&lt;strong&gt;Sandi Metz&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A major problem that has been noted by many, notably by Uncle Bob in his article on &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;The Single Responsibility Principle&lt;/a&gt; shows us how coupling different responsibilities that are likely to change in a single class leads us to a rigid, static codebase. We are fearful that changes to one responsibility in a class could collapse the operation of other responsibilities and this fear prevents useful change. However, there is another potential and notable outcome. If our thermometer tells us two different measurements and we have not altered the mechanisms that manage heat, we lose faith in our thermometer. We may give up on the tool’s ability to probe the behavior of the system and simply tinker with the system until it generally does what we want. When working on software, this is the moment where we abandon our testing suite and just throw code at the wall until the system ‘works.’&lt;/p&gt;

&lt;p&gt;Part of the reason that the SRP is a cornerstone of good system design is that it allows us to place faith in our tests. It isolates behavior in well defined modules where our thermometer only returns different results when we make visible changes to how the system manages heat. And if we want to tinker with the system and build a more efficient heat manager, we can trust our thermometer when it tells us that our system stayed the same temperature. The SRP provides confidence in our testing suite.&lt;/p&gt;

&lt;h3 id=&quot;well-defined-interfaces&quot;&gt;Well Defined Interfaces&lt;/h3&gt;

&lt;p&gt;This isolation of behavior also provides an additional benefit. If we have designed two seperate mechanisms in our system for managing heat and pressure, the mechanisms can provide a clear signal to each other when we change how they operate. The ability for the various modules in our system to communicate how they will operate to one another is the basis of an interface. The SRP proves to be a guiding light when we want to build well defined interfaces that only change when we want to alter a modules single responsibility. The SRP enables confidence when we probe behavior (unit test) and helps us build well defined modules that have a clear intent when we communicate between them (interfaces.)&lt;/p&gt;

&lt;h3 id=&quot;seperate-concerns&quot;&gt;Seperate Concerns&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;We want to increase the cohesion between things that change for the same reasons, and we want to decrease the coupling between those things that change for different reasons.
&lt;strong&gt;Uncle Bob&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Learning to isolate change provided humanity with the scientific revolution when applied to create the experimental method. We now had a powerful tool to probe the behavior of nature and be confident that we could &lt;em&gt;replicate&lt;/em&gt; our results. The SRP teaches us the same lesson when applied to our code; we can test with confidence and communicate changes clearly. We just have to be responsible.&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">When we want to probe the real world to understand how it works we often rely on instruments that can measure with a precision that far exceeds our own subjective capabilities. We use thermometers to ascertain a numeric representation of what we would term hot or cold. When developing software we have a tool that allows us to probe our code to understand how it works. This tool is unit testing.</summary></entry><entry><title type="html">Minimize Assumptions - Simple Design &amp;amp; SOLID</title><link href="http://localhost:4000/2018/10/04/minimize-assumptions.html" rel="alternate" type="text/html" title="Minimize Assumptions - Simple Design &amp; SOLID" /><published>2018-10-04T00:00:00-04:00</published><updated>2018-10-04T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/04/minimize-assumptions</id><content type="html" xml:base="http://localhost:4000/2018/10/04/minimize-assumptions.html">&lt;hr /&gt;
&lt;p&gt;This blog post assumes familiarity with Conway’s Game of Life.&lt;/p&gt;

&lt;p&gt;While reading The Four Rules of Simple Design (FRSD) a pattern emerges across several of the examples that seemed to sit at a crossroads between simple design and SOLID principles. I will refer to this pattern as ‘minimize assumptions’ and I believe it is an important sub-component of writing easily extensible code.&lt;/p&gt;

&lt;h3 id=&quot;duplication-of-knowledge-about-topology&quot;&gt;Duplication of Knowledge about Topology&lt;/h3&gt;

&lt;p&gt;The first encounter that displays how assumptions can harm our code quality appears in the “Duplication of Knowledge about Topology” example in FRSD. Here, a set_living_at method has been implemented on the World class to set a living cell to a specific coordinate in the game world.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;World&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_living_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Better get flat&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, we discover that the coordinates dimensionality has been hard coded into the method as well as all cell types that need access to said coordinates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LivingCell&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 'Cause there ain't no going back&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadCell&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What immediately follows is a limitation on our ability to extend the code in an interesting and perhaps desirable manner.&lt;/p&gt;

&lt;p&gt;By making a strong assumption about the dimensionality of our world’s representation, we have removed the ability to easily extend our code to handle not just 3-dimensions (which could be extremely visually interesting) but any number of higher dimensions. This assumption would have spread like a virus throughout our codebase as well, with all cell types making the same strong assumption and producing a codebase that disregards the Open Closed principle and disallows interesting extensions to our project without significant modification. This virus-like decision could potentially be deeply embedded within our code, affecting everything from how we check a location’s neighbors to how we define the parameters that govern the logic of the game.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleCell&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neighbors&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Have fun modifying this method&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By removing this assumption we can avoid situations such as hardcoding values like ‘2’ and ‘3’ into the game logic that dictates the neighboring cell rules for life and death and allow these values to be dynamically decided by the client when they choose their desired game dimensionality.&lt;/p&gt;

&lt;p&gt;Haines suggests a solution that generalizes x and y coordinates to the concept of a class that is readily swappable with locations classes of different dimensionality.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Location&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neighbors&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Calculate neighbor stuffs&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;World&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_living_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Ayy I could be any dimensionality!&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleCell&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:location&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Virus eradicated&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This immediately creates a richer, more extensible codebase that can be used to build all new Game of Lifes with different behavior, parameters, and potential visuals when rendered.&lt;/p&gt;

&lt;h3 id=&quot;dont-have-tests-depend-on-previous-tests&quot;&gt;Don’t Have Tests Depend on Previous Tests&lt;/h3&gt;

&lt;p&gt;The second encounter with problematic assumptions occurs in the “Don’t Have Tests Depend on Previous Tests” example. This example is meant to elucidate how creating dependencies between our tests can lead to a fragile testing suite, but I believe it also illustrates the broader potential mistake of making an assumption. The issue begins in an initial test to check if a new world is empty when constructed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_a_new_world_is_empty&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;assert_true&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# I declare new worlds to be empty, peasants.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A subsequent behavioral test is then implemented to check that after the game state is updated a single time, an empty world stays empty. The crux of the issue is that this second test creates a new world, updates the game state, and then checks if the world is still empty.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_an_empty_world_stays_empty_after_a_tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Says who?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And therein lies the problem; an assumption has been made that a new world is created empty. Should we choose to alter this design in the future and initially construct non-empty worlds, this test will mysteriously fail and display the fragile test coverage our unnecessary assumption has caused. By minimizing assumptions and realizing that we can drive our code with TDD, we can employ a builder pattern that provides a method for creating and returning an empty world without any dependencies on our initial configuration, thus strengthening our testing suite.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_an_empty_world_stays_empty_after_a_tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# No worldly assumptions up in here&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;procedural-polymorphism&quot;&gt;Procedural Polymorphism&lt;/h3&gt;

&lt;p&gt;The third and final encounter I discovered that elucidates how minimizing assumptions can create higher quality, more extensible code occurs in the “Procedural Polymorphism” example. Up until this point, a cell class has been implemented that uses an if-else branch to execute different behavior based on the ‘alive’ status of the cell.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alive_in_next_generation?&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# You're either alive. Or you ain't. Make up your mind!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stable_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;genetically_fertile_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And once again this code makes a strong assumption about the nature of the game that has the same effect of limiting our ability to extend the code with interesting and potentially desirable features.&lt;/p&gt;

&lt;p&gt;Haines initial attempt to remedy this is to use a state property that can take on values of ‘alive’ or ‘dead’ but this leads us to the same limitations that hard coding coordinates into our world and cells hit earlier.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alive_in_next_generation?&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ALIVE&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# I said it once. I won't say it again.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stable_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEAD&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;genetically_fertile_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By utilizing hard coded strings we have eliminated the potential to easily extend our game with new and potentially game altering cell types that we may want to implement to create a richer, more varied Game of Life. Haines uses the Zombie Cell as an example but I leave it to the imagination to think of how introducing new cell types with their own sets of rules could create novel forms of the Game of Life that could produce potentially beautiful animations and static constructs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AsexualCell&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alive_in_next_generation?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# I don't need no friends, they're all in my head.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By utilizing the idea of inverted composition introduced in the “Inverted Composition as a Replacement for Inheritance” example, we can create a codebase that is readily extensible so that we may experiment with a variety of different cells and their emergent interactions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Location&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cell&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LivingCell&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stays_alive?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadCell&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;comes_to_life?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;irl-tic-tac-toe&quot;&gt;IRL: Tic Tac Toe&lt;/h3&gt;

&lt;p&gt;The inadvertant decision to minimize assumptions naturally appeared when writing my first Tic Tac Toe application. Early on I made the decision to not include any explicit hard coded boards into my source code. This decision lead me to use for-loops with different starting and ending points, and increment values to check for horizontal, diagonal, and vertical wins.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Yay abstraction, rows, columns, and diagonals can all use this method&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkRowsForWin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Without knowing it at the time, I had minimized the assumptions I made about the games format. Later on, when tempted out of curiosity to add the option to play 4x4 and 5x5 tic tac toe boards to flex the alpha beta algorithm a bit (which failed until the magic of memoization, another post for another time,) I found that because my game logic was decoupled from assumptions about its format, implementing this feature was as simple as asking the user to choose a board size.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Simple design allows small changes to implement powerful new features without modifying existing code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that’s the whole point. By following the Four Rules of Simple Design from the start and minimizing assumptions between classes, extending the codebase became easier. Simple design allows small changes to implement powerful new features without modifying existing code. Solid and simple were best friends all along!&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">This blog post assumes familiarity with Conway’s Game of Life.</summary></entry></feed>