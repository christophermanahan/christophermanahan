<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-25T13:37:16-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">TBD</title><subtitle>Documenting the journey of a new apprentice @ 8th Light
</subtitle><author><name>Christopher Manahan</name></author><entry><title type="html">Functional Exception Handling in Java</title><link href="http://localhost:4000/2019/01/25/functional-exception-handling-in-java.html" rel="alternate" type="text/html" title="Functional Exception Handling in Java" /><published>2019-01-25T00:00:00-05:00</published><updated>2019-01-25T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/25/functional-exception-handling-in-java</id><content type="html" xml:base="http://localhost:4000/2019/01/25/functional-exception-handling-in-java.html">&lt;p&gt;Handling exceptions in Java requires diligence and strategy in order to determine what to do if our program can recover from failed events and what we should do when we can’t.&lt;/p&gt;

&lt;p&gt;Java 8 introduced Functional Java which opens up the world of functional programming techniques to the Java community.&lt;/p&gt;

&lt;p&gt;These techniques can be applied to deal with exceptions in new and interesting ways. So what is an exception, and why should you handle it functionally?&lt;/p&gt;

&lt;h3 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program’s instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exceptions are events that subvert how a program would normally run. They are objects that extend the throwable class. Three types of exceptions exist, checked, unchecked, and errors. This blog post will focus on unchecked exceptions.&lt;/p&gt;

&lt;p&gt;For reference, checked exceptions are checked at compile time and any method that may throw an exceptions must include a &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; clause in it’s signature. This specifies to callers of this method that they must either catch or rethrow this exceptions. Unchecked exceptions are thrown at runtime, and while they may still be caught and handled, or rethrown, it is not required in order for the code to successfully compile&lt;/p&gt;

&lt;p&gt;Exceptions allow methods to exit without returning a value, by handing an exception off to the runtime system.  The runtime system searched the call stack for a called method that can handle the exception. If a method specifies that it can catch the appropriate exception type it will handle the exception according to it’s specification. If no exception handler is thrown, the program will shutdown.&lt;/p&gt;

&lt;h3 id=&quot;maybe-type&quot;&gt;Maybe Type&lt;/h3&gt;

&lt;p&gt;In order to work with this limitation and specify a technique to handle exceptions without throwing them into the runtime environment we can take advantage of the ability to return Objects, which can act as containers for a variety of state and behavior. This allows us to return objects that contain different state that depends upon whether or not the method caught an exception or successfully executed.&lt;/p&gt;

&lt;p&gt;Functional programming provides us with a Maybe type that can either include or not include a value. The maybe type encapsulates this optional value and is a useful construct to deal with nullable values. The maybe type is not just useful for dealing with potential null values however, it also can provide us with a technique to handle recoverable unchecked exceptions gracefully and avoid using exceptions for control flow. Java 8 added the Optional class which is an implementation of the maybe type and includes a variety of chainable methods that allow for a functional style of piped data transformation to be utilized.&lt;/p&gt;

&lt;p&gt;In addition we will be discussing the either type which is another paradigm from functional programming that can provide a highly expressive way to implement functional exception handling. While the either type is not included in java we will discuss a small class that can be written using generics to implement this powerful type. However, in certain scenarios we can use an Optional to express whether or not an operation completed without throwing an exception.&lt;/p&gt;

&lt;h3 id=&quot;optional&quot;&gt;Optional&lt;/h3&gt;

&lt;p&gt;The way to represent this is simple and clean. If the optional contains data, the method call completed as expected, however if an exception was thrown, the optional will be empty. Why is this advantageous? It gives us the opportunity to handle unchecked exceptions, while making it clear that the method can return different encapsulated values and promotes the caller to handle both the successful (data is present), and failed (empty) scenarios. In addition, the optional class gives us access to the powerful functional interfaces in java, which allow us to easily transform data received from a method that would otherwise have thrown an unchecked exception. The calling class also obtains the opportunity to gracefully exit or recover without handling unnecessary exceptions when it is desired to ignore and recover from the exception.&lt;/p&gt;

&lt;h3 id=&quot;server-example&quot;&gt;Server Example&lt;/h3&gt;

&lt;p&gt;Let’s look at a simple HTTP server that to demonstrate the elegance enabled by functional exception handling.&lt;/p&gt;

&lt;h4 id=&quot;procedural-exception-handling&quot;&gt;Procedural Exception Handling&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This echo server contains a few abstraction.&lt;/p&gt;

&lt;p&gt;First, we have a connection that is capable of being read from, written to, and closed. We also have a ConnectionReader that can read a request string in from a connection. This is not injected because it’s behavior is simple and unnecessary too mock in unit tests. In addition we have a parse that can parse data read from the connection into a request. Finally, we have a handler that can handle requests and generate an appropriate response and a logger for well, logging.&lt;/p&gt;

&lt;p&gt;Unfortunately, as reading from, writing to, and closing a socket are operations that throw IOExceptions, we need to utilize a try catch block to handle unexpected behavior. We will have the connection rethrow these exceptions as RuntimeExceptions which is an unchecked exception type so that we may choose how to handle the thrown exceptions. For this example we have to make sure the connection gets closed if an exception is thrown so we assert that the connection closes in the catch clause.&lt;/p&gt;

&lt;p&gt;This setup is legible and descriptive but the connection must be closed if an exception is caught.  Let’s now assume that instead of a String, the ConnectionReader returns an Optional of the read in request string and see how we can leverage the functional interfaces in Java to produce cleaner code.&lt;/p&gt;

&lt;h4 id=&quot;optional-exception-handling&quot;&gt;Optional Exception Handling&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;parser:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifPresentOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see that the method is now a clean chain of calls that closes the connection if an exception is thrown and the Optional is empty using &lt;code class=&quot;highlighter-rouge&quot;&gt;ifPresentOrElse&lt;/code&gt;. This is more expressive and adding further data transformation capability into the server is as simple as adding another &lt;code class=&quot;highlighter-rouge&quot;&gt;.map()&lt;/code&gt; into the chain.&lt;/p&gt;

&lt;p&gt;Finally, I would like to take a look at the Either class and how we can implement it in Java to obtain another technique to handle exceptions functionally.&lt;/p&gt;

&lt;h4 id=&quot;either-exception-handling&quot;&gt;Either Exception Handling&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;parser:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;logger:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;handler:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;logger:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifSuccessOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;connection:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we obtain the ability to have Either wrap a value if the call succeeded, or wrap an exception if a failure occurred. We can then pipe these into the appropriate functions. In this example we will simply log the exception.&lt;/p&gt;

&lt;p&gt;Below is an example implementation of the Either type in Java that utilizes generics and static constructors.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failureMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;successMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failureMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ifSuccessOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a small API that provides the necessary methods but this could be expanded to include the analogies to the full breadth of methods included in Java’s Optional type.&lt;/p&gt;

&lt;p&gt;Those methods can be viewed here: 
&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Consumer.html&quot;&gt;Java 11 Optional Class&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 8 brought a host of powerful new capabilities to Java and we can learn from the paths blazed by the functional programmers before us. Java 8 adds new options to handle exceptions in Java and with some thought and respect, we can write cleaner, better Java code and handle exceptions in new and interesting ways!&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">Handling exceptions in Java requires diligence and strategy in order to determine what to do if our program can recover from failed events and what we should do when we can’t.</summary></entry><entry><title type="html">Package Principles, Part I</title><link href="http://localhost:4000/2018/12/21/Package-Principles-Part-I.html" rel="alternate" type="text/html" title="Package Principles, Part I" /><published>2018-12-21T00:00:00-05:00</published><updated>2018-12-21T00:00:00-05:00</updated><id>http://localhost:4000/2018/12/21/Package-Principles-Part-I</id><content type="html" xml:base="http://localhost:4000/2018/12/21/Package-Principles-Part-I.html">&lt;blockquote&gt;
  &lt;p&gt;“The design of large systems depends critically on good component design”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Packages allow teams to focus on and deploy isolated pieces of a system rather than the system as a whole. Grouping classes into packages allows developers to reason about higher level design at a new level of abstraction.&lt;/p&gt;

&lt;p&gt;However, just as dependencies between classes can become tangled and coupled, so too can dependencies between packages if left unmanaged as an application grows and requirements change.&lt;/p&gt;

&lt;p&gt;Two groups of six package principles have been developed and refined over the years to help create clean, robust, and maintainable packages that can be depended on by developers and stand the test of time. This blog post is about the first group, the &lt;strong&gt;Principles of Package Cohesion&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-reuserelease-equivalence-principle&quot;&gt;The Reuse/Release Equivalence Principle&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The granule of reuse is the granule of release”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If developers want to be able to reuse software packages, they cannot do so unless a release mechanism for that software exists. If the granule of release was simply at the source code level, we would be forced to copy and paste code, and any updates to that code or bug fixes would not be received by developers reusing the code. Therefore, the granule of release must be at the level of reusable packages in order to ensure that the client code and source code are synchronized and do not diverge.&lt;/p&gt;

&lt;p&gt;This signifies that packages are the granule of release, and offers hints as to how to structure our code to allow it to be reusable and releasable&lt;/p&gt;

&lt;h4 id=&quot;all-or-none&quot;&gt;All or None&lt;/h4&gt;

&lt;p&gt;If a package is to be reused, all of the classes within it must also be capable of being reused.&lt;/p&gt;

&lt;p&gt;We cannot have classes that are coupled to other packages as this would leave the package dependent and it’s true granule of reuse would have to include the package it is coupled too.&lt;/p&gt;

&lt;h4 id=&quot;domain-independence&quot;&gt;Domain Independence&lt;/h4&gt;

&lt;p&gt;We must structure our code so that the domain of the package is independent of other domains. A package must follow the single responsibility principle to encourage maximum reusability&lt;/p&gt;

&lt;p&gt;If we couple two responsibilities together, such as an electronic payment library and a shopping cart, clients can no longer utilize the functionality of one responsibility without the other, and the package has become less able to be reused in a wider variety of scenarios.&lt;/p&gt;

&lt;p&gt;By adhering to these two sub-principles we can ensure that our packages can be reused by other developers, and that our packages are modular.&lt;/p&gt;

&lt;h3 id=&quot;the-common-reuse-principle&quot;&gt;The Common Reuse Principle&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The classes in a component are reused together. If you reuse one of the classes in a component, you reuse them all.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The CRP is the analogue of the Interface Segregation Principle for packages.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“No client should be forced to depend on methods it does not use” -ISP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ISP guides us to only depend on interfaces if we depend on the entirety of the interface. If we are depending on fragments of an interface in one class, and other fragments in another, it is a signal that our interface may have more than one responsibility and should be segregated.&lt;/p&gt;

&lt;p&gt;The CRP makes a similar assertion for packages. If you are going to reuse a packaged class, you must depend on the entire package. Just as the ISP provides a signal as to what methods belong in an interface, and which do not, the CRP tells us which classes do not belong within a package. The CRP says more about which classes &lt;em&gt;do not&lt;/em&gt; belong in a package rather than those that do. If a class is not tightly coupled to other classes within a package, it is a signal that it does not belong.&lt;/p&gt;

&lt;p&gt;A single change to a class inside a package, whether or not a client of the package cares about that change or not, requires an entire re-release and re-deployment of that package. This is costly and should only occur if clients of the package actually care about the update. Therefore packaging together classes that do not change together increases the likelihood of costly and unnecessary re-releases.&lt;/p&gt;

&lt;h3 id=&quot;the-common-closure-principle&quot;&gt;The Common Closure Principle&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The classes in a component should be closed together against the same kinds of changes. A change that affects a component affects all the classes in that component and no other components.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The CCP is the Single Responsibility Principle Analogue for packages.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We want to increase coupling between classes that change for the same reasons, and separate those that change for different reasons” -SRP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When changes inevitably occur, we want to isolate the number of places they occur in. The best way to do this is to keep classes that are likely to influence each other, to depend on each other, in the same packages.&lt;/p&gt;

&lt;p&gt;By making sure a package has one and only one responsibility, we help reinforce that changes to code within the package are isolated within that package and do not require changes to other classes in other packages.&lt;/p&gt;

&lt;p&gt;CCP attempts to minimize the number of changes that occur across packages when requirements change by providing a common closure around classes that all work together to implement a single abstraction.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This blog post covers the first three of the package principles, the &lt;strong&gt;Principles of Package Cohesion&lt;/strong&gt;. Part II will cover the second three, the &lt;strong&gt;Principles of Package Coupling&lt;/strong&gt;.&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">“The design of large systems depends critically on good component design”</summary></entry><entry><title type="html">Network Sockets</title><link href="http://localhost:4000/2018/12/14/network-sockets.html" rel="alternate" type="text/html" title="Network Sockets" /><published>2018-12-14T00:00:00-05:00</published><updated>2018-12-14T00:00:00-05:00</updated><id>http://localhost:4000/2018/12/14/network-sockets</id><content type="html" xml:base="http://localhost:4000/2018/12/14/network-sockets.html">&lt;h3 id=&quot;abstractions-all-the-way-down&quot;&gt;Abstractions All the Way Down&lt;/h3&gt;

&lt;p&gt;A network socket, like all entities and concepts in software, is an abstraction. A network socket is a software representation of a point in a computer network that is internally exposed to processes, such as a Java application, by a computer’s operating system. The OS exposes this endpoint through networking software which is referred to as a protocol stack and provides a set of system calls that allow a user to send and recieve data to other endpoints in the network that have connected to the network socket.&lt;/p&gt;

&lt;p&gt;There are many layers of abstraction between the software we wield as developers, and the eventual physical electrons that get sent across copper or fiber optic wires to enable communcation across a computer network. Operating systems also use sockets to allow different processes within a computer to talk to one another in a process known as inter-process communication.&lt;/p&gt;

&lt;h3 id=&quot;socket-address&quot;&gt;Socket Address&lt;/h3&gt;

&lt;p&gt;A network socket is a representation of a communcations endpoint in a network. This network can be local or remote, and the representation is most often referred to using an &lt;em&gt;address&lt;/em&gt;. The first stage in establishing communcation to other nodes in a network is the request that the protocol stack creates a socket at a specific address.&lt;/p&gt;

&lt;p&gt;A socket address is composed of both an IP address that identifies the computer it has been created on and a port that represents a single endpoint within that computer. Ports are an abstraction that allow a computer to establish multiple connections to various different networks.&lt;/p&gt;

&lt;h3 id=&quot;socket-descriptor&quot;&gt;Socket Descriptor&lt;/h3&gt;

&lt;p&gt;When the protocol stack creates a socket it provides a process (a running application) with a socket &lt;em&gt;descriptor&lt;/em&gt; which is a single unique value that the application can use to identify to the protocol stack which socket it would like to send or receive from. The protocol stack can then identify the IP address and port that the socket descriptor refers to and perform the appropriate action. This leaves applications unaware of the details of where or how they will communicate with a socket, whether it’s connected locally or remotely, or to a single client or many. All the application is aware of is the single descriptor.&lt;/p&gt;

&lt;p&gt;This degree of seperation also means that the local protocol stack does not have access to foreign socket descriptors, these are internal to that socket representation that is managed by it’s own remote protocol stack.&lt;/p&gt;

&lt;h3 id=&quot;two-way-communication&quot;&gt;Two Way Communication&lt;/h3&gt;

&lt;p&gt;When a process at a local IP address requests to communicate with a socket at a foreign IP address on a certain port the local protocol stack creates a socket, returns its descriptor to the process, and attempts to establish a connection to the foreign address. That foreign protocol stack receives the request, and subsequently creates it’s own socket in order to facilitate the communication. The process of associating a socket to an address is known as &lt;em&gt;binding&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This connection is only established if a foreign process(es) has requested to the foreign protocol stack that it would like to listen for connection requests on the address and port that the request has been sent to. The listening process will then receive a socket descriptor from the protocol stack if a connection request has succeded and enable the foreign process to send and recieve data through it’s own local socket to the socket managed by the protocol stack on the other side of the network.&lt;/p&gt;

&lt;p&gt;Once the local socket has been created and a socket descriptor has been returned, the local process can simply reference the socket descriptor and the protocol stack will handle sending and receiving data to and from the foreign socket at the foreign IP address at the specific port.&lt;/p&gt;

&lt;p&gt;A socket exposes both its input and output which represent the ability to ask the protocol stack to send data through the network (write to the socket) or receive data that has been sent to the socket (read from the socket). In order to facilitate two way communication, a process must reference both of these data streams.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;There is a nuance in differentiating socket addresses, descriptors, and the socket itself. 
To summarize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A socket is the internal (software) representation created by the protocol stack, that allows it to send and receive data across a network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A socket address is made up of an IP address (the address of the host computer) and a port (the specific connection within that host) and is used when a protocol stack wants to communicate with a socket on another network or facilitate communcation between local processes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A socket descriptor is the identifier that allows a process running on an operating system to communicate with that operating system’s protocol stack. It only has meaning within the a single computer and cannot be used to reference other network sockets.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sockets allow network connections to be abstracted away from the processes that wish to speak to other processes. This abstraction applies whether the other process is halfway across the world or running on the same computer. The protocol stack software exposed by the OS handles these details for us and allows higher level protocol’s like HTTP to run on these abstractions so we can talk to each other over a variety of networks using a variety of mediums!&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">Abstractions All the Way Down</summary></entry><entry><title type="html">Cucumber Basics</title><link href="http://localhost:4000/2018/12/11/cucumber-basics.html" rel="alternate" type="text/html" title="Cucumber Basics" /><published>2018-12-11T00:00:00-05:00</published><updated>2018-12-11T00:00:00-05:00</updated><id>http://localhost:4000/2018/12/11/cucumber-basics</id><content type="html" xml:base="http://localhost:4000/2018/12/11/cucumber-basics.html">&lt;p&gt;Cucumber is an acceptance testing framework. Let’s dive in.&lt;/p&gt;

&lt;h3 id=&quot;basics&quot;&gt;Basics&lt;/h3&gt;

&lt;p&gt;Cucumber utilizes a hierarchical testing structure to create readable, read-like-a-sentence representations of what your application should do. It reads in plain text files written in a language called Gherkin. Each file represents a &lt;em&gt;feature&lt;/em&gt; of your system and contains a variety of &lt;em&gt;scenarios&lt;/em&gt; that will be tested.&lt;/p&gt;

&lt;p&gt;These scenarios are defined by &lt;em&gt;step definitions&lt;/em&gt; which serve as the connective tissue between the sentence describing the scenario and the runnable &lt;em&gt;support code&lt;/em&gt; that tests that the feature has been implemented properly.  This support code is specific to the domain of your system (POSTing to a server, Triggering an onClick event in the UI).&lt;/p&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;

&lt;p&gt;Every Gherkin file represents a feature and begins with the &lt;em&gt;feature&lt;/em&gt; keyword. Features may be followed by an optional description. The description is a deep dive that precisely describes the intent and purpose of a feature and includes any details that are relevant to it’s acceptance criteria.&lt;/p&gt;

&lt;p&gt;Features contain several different scenarios which are representative of the different states a system may have to deal with and hopefully provide coverage over edge cases and distinct behavior that must be implemented.&lt;/p&gt;

&lt;h3 id=&quot;scenario&quot;&gt;Scenario&lt;/h3&gt;

&lt;p&gt;Scenario’s represent a specific scenario that describe how the system should behave when presented with a certain situation. In order to get a scenario to pass, the system’s behavior must adhere to the scenario’s outline.&lt;/p&gt;

&lt;p&gt;Scenarios are made up of three steps that are analagous to the &lt;em&gt;Arrange&lt;/em&gt;, &lt;em&gt;Act&lt;/em&gt;, &lt;em&gt;Assert&lt;/em&gt; paradigm found in unit testing.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Manipulate the system to be in a certain state&lt;/li&gt;
  &lt;li&gt;Instruct the system to perform the behavior to be tested&lt;/li&gt;
  &lt;li&gt;Verify the subsequent state of the system&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These three steps can be constructed in sentence-like structure using the keywords &lt;em&gt;Given&lt;/em&gt;, &lt;em&gt;When&lt;/em&gt;, and &lt;em&gt;Then&lt;/em&gt;. In addition, &lt;em&gt;And&lt;/em&gt; and &lt;em&gt;But&lt;/em&gt; can be interwoven into these steps to increase the expressiveness of the scenario.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cucumber&quot; data-lang=&quot;cucumber&quot;&gt;&lt;span class=&quot;nf&quot;&gt;Given &lt;/span&gt;I ordered a taco through the app yesterday
&lt;span class=&quot;nf&quot;&gt;And &lt;/span&gt;I am a tacohort rewards member
&lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;I order a taco today
&lt;span class=&quot;nf&quot;&gt;Then &lt;/span&gt;I should get a 10% Discount&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As in any proper testing environment, cucumber scenarios should be independent of one another and not depend on the status of any other scenario.&lt;/p&gt;

&lt;h3 id=&quot;step-definitions&quot;&gt;Step Definitions&lt;/h3&gt;

&lt;p&gt;Step definitions serve as the binding between Gherkin scenarios and the concrete implementation of the actions that will be performed in order to test the system. Step definitions describe how your support code should manipulate the system, but do not perform these manipulations themselves. They are kept distinct from the support code that will actually poke and prod the system.&lt;/p&gt;

&lt;p&gt;Step definitions bridge this gap between the scenario and support code by using string matching to extract the relevant information from the scenario written in Gherkin and provide them to the support code. This is most commonly executed using regular expressions (regex).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^I have bought \$(\d+) worth of tacos (\d+) days ago$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO: code goes here&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;End&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While regular expressions are outside of the scope of this post, this presentation by Lea Verou provides a fast-paced wealth of information that covers everything you need to know in order to get started using regex in your Gherkin scenarios!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=EkluES9Rvak&amp;amp;t &quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://i3.ytimg.com/vi/EkluES9Rvak/maxresdefault.jpg&quot; alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; style=&quot;display:block;margin:auto&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;^&lt;/em&gt; and &lt;em&gt;$&lt;/em&gt; symbols serve as anchors that specify the beginning and end of the scenario snippet.&lt;/p&gt;

&lt;p&gt;Another useful feature that allows writing out a series of tests that will all live at the same level of abstraction before coding their concrete support code implementation is &lt;em&gt;pending&lt;/em&gt;.  Pending allows you to specify what the concrete implementation will do and then move onto writing the next test so that the behavior of the system at this level can be fully specified before implementing the support code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^I have bought \$(\d+) of tacos$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Need to design the purchase history interface&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^I buy \$(\d+)$/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tacos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;How do we withdraw funds?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;expressive-scenarios&quot;&gt;Expressive Scenarios&lt;/h3&gt;

&lt;p&gt;Cucumber includes several more key features that allow developers to write expressive scenarios that focus on the important and relevant information about the system under test.&lt;/p&gt;

&lt;h4 id=&quot;backgrounds&quot;&gt;Backgrounds&lt;/h4&gt;

&lt;p&gt;Backgrounds are a section in the feature file that allow you to express steps that are common to the scenarios that will be tested. This is analagous to the beforeEach paradigm in unit testing and serves a similar purpose. Backgrounds isolate setup code so that it must only be changed in one place and allow the reader to focus on the unique and relevant behavior in each scenario. This increases readability but also has the potential to be abused and cause the reader to jump back and forth between a complicated setup routine and the outline in the scenario.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You want to be in a single responsibility mindset when designing feature tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can be avoided by keeping backgrounds simple and short. If you find your background becoming convoluted it may be a sign that you are testing more than one feature in the file. You want to be in a single responsibility mindset when designing feature tests. In addition, technical details like opening and closing sockets or pinging third party API’s belong in your support code and not in your backgrounds.&lt;/p&gt;

&lt;h4 id=&quot;data-tables&quot;&gt;Data Tables&lt;/h4&gt;

&lt;p&gt;Data tables allow Cucumber users to describe more complex, potentially multi-dimensional data in a format that would not map well to the single lines that &lt;em&gt;Given&lt;/em&gt;, &lt;em&gt;When&lt;/em&gt;, and &lt;em&gt;Then&lt;/em&gt; require.  They can represent larger data and if you find yourself writing &lt;em&gt;Given&lt;/em&gt;… &lt;em&gt;And&lt;/em&gt;… &lt;em&gt;And&lt;/em&gt;… &lt;em&gt;And&lt;/em&gt;… then it may be a signal that a data table could increase your test expressiveness.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cucumber&quot; data-lang=&quot;cucumber&quot;&gt;&lt;span class=&quot;err&quot;&gt;Given these tacos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Filling&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Carnitas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Soft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sofritas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Soft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Beans&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Then the shopping cart should contain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Meat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4.95&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tofu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4.25&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Veggie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3.55&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;scenario-outlines&quot;&gt;Scenario Outlines&lt;/h4&gt;

&lt;p&gt;Scenario outlines allow Cucumber users to extract various input values and/or expected outcomes from scenarios that follow a common set of steps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cucumber&quot; data-lang=&quot;cucumber&quot;&gt;&lt;span class=&quot;kn&quot;&gt;Scenario Outline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Buy tacos
  &lt;span class=&quot;nf&quot;&gt;Given &lt;/span&gt;I have &lt;span class=&quot;nv&quot;&gt;&amp;lt;Balance&amp;gt;&lt;/span&gt; tacopoints
  &lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;I buy &lt;span class=&quot;nv&quot;&gt;&amp;lt;Amount&amp;gt;&lt;/span&gt; tacos
  &lt;span class=&quot;nf&quot;&gt;Then &lt;/span&gt;I should receive &lt;span class=&quot;nv&quot;&gt;&amp;lt;Additional&amp;gt;&lt;/span&gt; tacopoints
  &lt;span class=&quot;nf&quot;&gt;And &lt;/span&gt;The balance of my account should be &lt;span class=&quot;nv&quot;&gt;&amp;lt;Updated&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Balance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Additional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Updated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;550&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;550&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1550&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Placeholders&lt;/em&gt; are indicated in the scenario outline using angle brackets and serve as variables that can be assigned in the example section of the scenario. You also have the ability to use multiple different tables to test different but related behavior, such as valid and invalid setups.&lt;/p&gt;

&lt;h3 id=&quot;step-definition-internals&quot;&gt;Step Definition Internals&lt;/h3&gt;

&lt;p&gt;A step definition begins by capturing the variable definitions that were defined in the Gherkin test scenarios. Once these variables have been defined they are used to set the system under test into a particular configuration state.  This is often achieved through including libraries in the support code but the system can also be tested using your own custom support code. The step definition can use your support code to poke and prod the system under test. After the captured information has been used to instantiate the support code and the system under tests the relevant methods that will test the system should be called and the support code should be utilized to test the system. A unit testing framework can then be used to verify the results and the acceptance testing cycle for a step is complete.&lt;/p&gt;

&lt;p&gt;These steps break down as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Capture relevant information from the Gherkin test scenario&lt;/li&gt;
  &lt;li&gt;Use this information to configure the system under test and the support code that will poke the system&lt;/li&gt;
  &lt;li&gt;Capture the results of poking the system&lt;/li&gt;
  &lt;li&gt;Verify these results against the expected outcome using assertions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Examples of support code could include an HTTPRequest that can connect to the server using an HTTP Library or a custom socket connection and return an HTTP Response that could be verified using an xUnit framework against the expected response.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Cucumber is a powerful acceptance testing framework that allows plain text language to express powerful and expressive scenarios that can drive the BDD test cycle.&lt;/p&gt;

&lt;p&gt;The Cucumber Book is an excellent resource for further reading and code examples on how to use Cucumber with your next project.&lt;/p&gt;

&lt;p&gt;Working with expressive acceptance tests provides a bridge between developers, clients, and business stakeholders and allows effective communication of requirements and acceptance criteria making your development cycle more efficient and less prone to rewrites!&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">Cucumber is an acceptance testing framework. Let’s dive in.</summary></entry><entry><title type="html">Dependency Inversion</title><link href="http://localhost:4000/2018/12/07/dependency-inversion.html" rel="alternate" type="text/html" title="Dependency Inversion" /><published>2018-12-07T00:00:00-05:00</published><updated>2018-12-07T00:00:00-05:00</updated><id>http://localhost:4000/2018/12/07/dependency-inversion</id><content type="html" xml:base="http://localhost:4000/2018/12/07/dependency-inversion.html">&lt;ul&gt;
  &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.
  &lt;/li&gt;
  &lt;li&gt;Abstractions should not depend upon details. Details should depend upon abstractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Dependency inversion begins with these two statements. When we speak of high level modules we are talking about the business logic of an application. High level modules contain the identity of the application; they are responsible for the behavior of the system.&lt;/p&gt;

&lt;h3 id=&quot;depending-on-lower-levels&quot;&gt;Depending on Lower Levels&lt;/h3&gt;

&lt;p&gt;When you have modules that define the identity of your application, you would like these modules to only have to change if the identity of the application changes. They should not have to respond to changes deeper down in the implementation details.&lt;/p&gt;

&lt;p&gt;When the identity of the application depends on lower level modules any changes to these low level modules will result in rewrites to the business logic of the application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is diametrically opposed to the desired behavior.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;High level modules should function independent of the implementation of lower level modules. Those details should be abstracted away from the high level module so that they may be reused just as low level modules are reused to implement commonly desired functionality. By applying dependency inversion we can isolate high level modules from changes in the implementation details of lower level concrete classes. In other words, we can make our application flexible and extensible.&lt;/p&gt;

&lt;h3 id=&quot;layers-of-abstraction&quot;&gt;Layers of Abstraction&lt;/h3&gt;

&lt;p&gt;Well defined object oriented programs have clearly defined layers of abstraction. These layers allow a developer to build an application the way a mechanic builds a car. Once we place an engine in the car we do not worry about the pistons and cylinders that drive revolution. We design the car around the engines ability to rotate a driveshaft. This is the ‘engine abstraction’ and it represents one layer in the development of a car. This same principle helps us build software.&lt;/p&gt;

&lt;p&gt;However these layers have the potential to be abused and can lead to transitive dependencies.&lt;/p&gt;

&lt;p&gt;Transitive dependencies result when a naive layering scheme is applied. Having high level modules depend on lower level modules, who in turn depend on even lower level modules results in a structure where a change to a low level module can ‘propagate up’ the dependency structure and cause reverberations that require change to all of the higher level modules that depend upon it.&lt;/p&gt;

&lt;p&gt;How can we avoid this chain of changes?&lt;/p&gt;

&lt;p&gt;In order to avoid transitive dependencies the high level module should define abstract interfaces for the modules that will implement behavior they require.&lt;/p&gt;

&lt;h3 id=&quot;clients-define-interfaces&quot;&gt;Clients Define Interfaces&lt;/h3&gt;

&lt;p&gt;Interfaces are a powerful tool that tell developers to rely on behavior and not implementation. As long as interfaces are implemented, a higher level module does not care about how the implementer of an interface performs its duty, as long as it gets it done efficiently and correctly.&lt;/p&gt;

&lt;p&gt;By having higher level modules define the interfaces they need, we have also applied the dependency inversion principle to the interfaces themselves. The high level module now ‘owns’ the interface, because it defines the behavior it requires. Low level modules simply implement that interface, but no longer own the functionality they will provide. They do not own the behavior.&lt;/p&gt;

&lt;p&gt;Not only does this inversion of ownership break the dependence of higher level modules on changes to lower level modules, it also breaks the transitive dependency by depending on abstractions. The interface lives within the same package as the high level modules, forcing the lower level module to adhere to its desired structure.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Depend on abstractions 
-Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is inevitable that the code we write is volatile, that the interfaces we create will be subject to change.&lt;/p&gt;

&lt;p&gt;This is why it is so important for the client to define the interface it needs. If the interface lives with the concrete class, and the interface of the concrete class changes, this will propagate up to the dependent class and require rewriting the business logic of the application. However, if the client owns the interface, the only time the interface will change is when the client needs it to change, and the dependence of higher level modules on lower level modules has been broken.&lt;/p&gt;

&lt;h3 id=&quot;defining-higher-level-interfaces&quot;&gt;Defining Higher Level Interfaces&lt;/h3&gt;

&lt;p&gt;How do we define these higher level interfaces?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The truths that do not vary when the details are changed 
-Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interfaces should define generic abstractions that can be wielded by modules that identify the business logic of the application. These interfaces should be implemented by more specific, lower level concrete classes that depend on the interface defined by the higher level module.&lt;/p&gt;

&lt;p&gt;The target object of the higher level module does not matter. The way the behavior of the interface is implemented does not matter. The only thing that matters is that the higher level policy can assume it has access to efficient and correct behavior.&lt;/p&gt;

&lt;p&gt;Breaking the dependence on the identity of the lower level module has another desirable effect. It allows the higher level modules to manipulate and control objects that have not yet been written into existence.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The proper application of dependency inversion is necessary when designing reusable applications.&lt;/p&gt;

&lt;p&gt;It is a primary design principle that allows the design of reusable, resilient, and flexible code. It breaks transitive dependencies and prevents change from propagating through an application requiring the developer to alter everything that it touches.&lt;/p&gt;

&lt;p&gt;Change is inevitable. Having change reverberate thorough our applications is not. &lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">High-level modules should not depend on low-level modules. Both should depend on abstractions.   Abstractions should not depend upon details. Details should depend upon abstractions.</summary></entry><entry><title type="html">Composition and Inheritance</title><link href="http://localhost:4000/2018/11/02/composition-and-inheritance.html" rel="alternate" type="text/html" title="Composition and Inheritance" /><published>2018-11-02T00:00:00-04:00</published><updated>2018-11-02T00:00:00-04:00</updated><id>http://localhost:4000/2018/11/02/composition-and-inheritance</id><content type="html" xml:base="http://localhost:4000/2018/11/02/composition-and-inheritance.html">&lt;blockquote&gt;
  &lt;p&gt;Prefer composition over inheritance&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software mantras can often lead developers into believing that design philosphies are laws that cannot be broken. In particular, favoring composition over inheritance tends to often be morphed into ‘never inheritance.’ And while this may be a backlash to generations of programs that caused developers to experience a kind of pain that can only be brought about by the intense coupling created by misapplying inheritance, the mantra is surprisingly robust, and has few exceptions.&lt;/p&gt;

&lt;h3 id=&quot;composition-is-natural&quot;&gt;Composition is Natural&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to break a problem down in order to build a solution up&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Composition tends to align well with how humans like to understand the natural world. When we encounter a complex problem, a proven approach throughout history is to ask, ‘Can we break this into smaller, approachable pieces?’ This is the take smaller bites until you can chew approach. Composition allows us to gradually build up objects in our mind and creates clear delineations that allow for magical properties like the ability to test small units and their interactions with one another.&lt;/p&gt;

&lt;h4 id=&quot;composition-in-the-analog-world&quot;&gt;Composition in the Analog World&lt;/h4&gt;

&lt;p&gt;Creating software without the use of composition would be like trying to reason about a car as one mass entity. When dealing with the complexities of an automobile it helps to think in terms of its subsquent parts. And even those subsequent parts can be broken down further. An engine is responsible for turning a drive shaft. But an engine is made up of, among other things, a fuel injector for creating aerosolized gasoline, a spark plug for igniting the aerosol, and cylinders inside of pistons to take advantage of the force generated by the subsequent explosion.&lt;/p&gt;

&lt;p&gt;Breaking the engine down into it’s components allows us not just to reason about how it works, but reason about how to design it in the first place. Instead of asking how to rotate a drive shaft we can ask, how can I efficiently create a force, and how can I use the force to accomplish a rotation. Someone answered “small explosions” and the rest is history.&lt;/p&gt;

&lt;h4 id=&quot;composition-in-the-digital-world&quot;&gt;Composition in the Digital World&lt;/h4&gt;

&lt;p&gt;When building a game like Tic Tac Toe composition plays a simlar role in reasoning about how to break a problem down in order to build a solution up. If we simply think of tic tac toe as a game with rules we have no idea where to start building a solution. But by breaking it down we can start to reason about the various components in play. The game takes place on a board. There are players that wield symbols. The game has rules, and so on. Each of these individual pieces may also be composed of smaller, more digestable (and testable!) pieces.&lt;/p&gt;

&lt;p&gt;Composition also promotes the use of polymorphism and duck typing to provide a variety of behaviors that can be injected as dependencies into higher level classes that expect a certain interface. These concepts promote generalized and robust solutions that follow another useful mantra of software design.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code to an interface, not an implementation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So with all of this praise for composition, are there use cases for inheritance, or is it an old dinosaur of software design mucking up the compilers of enterprise loved languages like Java and C#?&lt;/p&gt;

&lt;h3 id=&quot;the-dark-art-of-inheritance&quot;&gt;The Dark Art of Inheritance&lt;/h3&gt;

&lt;p&gt;Inheritance provides a syntax supported, directed way to share behavior between classes. Inheritance achieves this by providing &lt;em&gt;automatic message forwarding&lt;/em&gt;. Inheritance functions by allowing developers to create subclass-superclass relationships, or more naturally, parent-child relationships. Children of superclasses &lt;em&gt;inherit&lt;/em&gt; all of the behavior of the parent class, and add their own behavior into the mix. With this inheritance comes the responsibility to anticipate changes to the parent classes interface and thus the problems emerge.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Inheritance creates strong coupling between the parent and child&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whenever changes to the parent classes public interface are performed, all child classes must be altered to accomodate the change. This means that developers must be extremely careful to manage their dependencies. Superclasses should only be abstracted when they are &lt;em&gt;unlikely to change&lt;/em&gt;. From a similar perspective, if adhering to the dependency inversion principle, superclasses should be &lt;em&gt;less&lt;/em&gt; likely to change than their children. In addition, because children inherit &lt;em&gt;all&lt;/em&gt; of the public behavior of their parent, if we are to adhere to the Liskov substitution principle, we should only abstract superclasses when we are sure that the superclass behavior will be shared &lt;em&gt;and&lt;/em&gt; used by all of it’s children.&lt;/p&gt;

&lt;p&gt;So with a careful mindset, when should we proceed forward with the decision to utilize the seemingly dark art of inheritance?&lt;/p&gt;

&lt;h4 id=&quot;inheritance-is-special&quot;&gt;Inheritance is special&lt;/h4&gt;

&lt;p&gt;Inheritance can be extremely useful when we desire &lt;em&gt;specialization&lt;/em&gt;. If we discover that we have a class that has a single responsibility and our goal is to make a variety of different variations on that class that will all utilize the behavior provided by our SRP abiding parent, we have a strong argument to apply inheritance.&lt;/p&gt;

&lt;p&gt;The trick is to recognize when our classes are specializations of a generalization, and not when we simply want to share some behavior between classes.&lt;/p&gt;

&lt;p&gt;Inheritance is a feature in many programming languages because it is useful to employ hierarchies when building data types. In Ruby, everything is an object. Whether it is a string or an integer, every value is an object and therefore is imbued with behavior. This provides a classic use case for inheritance, where it provides &lt;em&gt;consistency&lt;/em&gt; and a clear direction for the relationships among classes. All data types in Ruby forward messages that cannot be found within their own handlers to their superclass. This allowed the designers of the language to provide common behavior to &lt;em&gt;every&lt;/em&gt; data type in Ruby, and model everything as objects.&lt;/p&gt;

&lt;h3 id=&quot;prefer-is-a-powerful-word&quot;&gt;Prefer is a Powerful Word&lt;/h3&gt;

&lt;p&gt;Inheritance can be powerful when employed correctly, but it’s defacto usage for decades and the subsequent pain caused by the strong coupling it introduces have given developers a mantra that makes sense. Composition is a natural and unbelievably powerful technique to approach problems and build beautiful decoupled applications. But the word prefer should not be forgotten, and when we need nothing more than specialization, we should look to inheritance for assistance.&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">Prefer composition over inheritance</summary></entry><entry><title type="html">Techniques to Manage Dependencies and Build Flexible Interfaces</title><link href="http://localhost:4000/2018/10/22/dependency-and-interface-techniques.html" rel="alternate" type="text/html" title="Techniques to Manage Dependencies and Build Flexible Interfaces" /><published>2018-10-22T00:00:00-04:00</published><updated>2018-10-22T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/22/dependency-and-interface-techniques</id><content type="html" xml:base="http://localhost:4000/2018/10/22/dependency-and-interface-techniques.html">&lt;p&gt;Seemingly innocuous code can often be hiding design decisions that will only rear their ugly head as a project morphs and grows over time. When working on a class that represents apartments in a building, it is quite easy to lock your code into a myriad of strangling dependencies and a rigid interface.&lt;/p&gt;

&lt;p&gt;We begin our journey into flexing good design techniques with a gets-the-job-done building class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Building&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:location&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_apartments_by_floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_apartments_by_max_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_aparments_by_min_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apartment&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:price&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;managing-dependencies&quot;&gt;Managing Dependencies&lt;/h3&gt;

&lt;p&gt;This code allows clients of building to get information on apartments in the building using a variety of methods. Building contains an array of apartments that have certain attributes like price and size and it is here that we encounter our first embedded dependency. Whenever you are calling a constructor in a class it should activate your sense of smell. Due to this constructor call our building is now bound to the implementation of the apartment class and any changes to the apartment class will reverberate to all of its dependents including board.&lt;/p&gt;

&lt;h4 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are mindful of dependencies and develop a habit of routinely injecting them, your classes will naturally be loosely coupled.
&lt;strong&gt;Sandi Metz&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we look at building’s methods we can see that we only care if an apartment has a size and a price. Maybe we would also like to own buildings that can rent out storage rooms or music practice rooms. In this scenario buiding doesn’t care if a room is an instance of apartment or any other type of room as long as we can access it’s price and size.&lt;/p&gt;

&lt;p&gt;We can resolve this issue by utilizing dependency injection. This is a complicated sounding technique that boils down to passing instances of classes into the constructor of a class dependent on those instances. As long as those instances adhere to the interface required by the class they are injected into, the type of that class no longer matters to us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Building&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:location&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now utilize a factory to prepare our apartments for injection into building as below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApartmentsFactory&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apartment_factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApartmentFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartment_factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Buildings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;120 5th Avenue, NY, NY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our apartments factory is very similar to the original building constructor but we have decoupled building from its functional dependency on apartments by utilizing dependency injection.&lt;/p&gt;

&lt;h4 id=&quot;structural-dependency&quot;&gt;Structural Dependency&lt;/h4&gt;

&lt;p&gt;Our next dependency is implied within the building’s methods. They are only functional if building is instantiated with a 2 dimensional array in a very specific format (apartments[floor][room].) This is not ideal and makes changing the data structure full of apartments we pass to building impossible. It also has ramifications for any client of building who will not be able to see what floor they live on after using one of building search methods.&lt;/p&gt;

&lt;p&gt;We can begin to decouple this unmanaged dependency by constructing apartments that know what floor they are on and injecting a simpler data structure into building.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apartment&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:floor&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@floor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Building&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_apartments_by_floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_apartments_by_max_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_aparments_by_min_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApartmentsFactory&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartment&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now as long as we inject an enumerable that adheres to the correct interface into building its search methods will be fully functional.&lt;/p&gt;

&lt;h4 id=&quot;order-dependency&quot;&gt;Order Dependency&lt;/h4&gt;

&lt;p&gt;Another dependency reveals itself if we look closely at apartments factory that has been plaguing us in past iterations as well. This is the dependency on argument order that exists in the build method. Unless we pass these arrays in the specified order our factory will produce incorrect apartments. A quick fix in Ruby is to utilize named parameters to prevent the order dependency.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApartmentsFactory&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApartmentFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;sizes: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizes&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;prices: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;floors: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floors&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;creating-flexible-interfaces&quot;&gt;Creating Flexible Interfaces&lt;/h3&gt;

&lt;p&gt;We want building to have a flexible interface with stable public methods and incoming messages that focus on asking for “what” instead of telling “how.”&lt;/p&gt;

&lt;h4 id=&quot;well-defined-public-interface&quot;&gt;Well Defined Public Interface&lt;/h4&gt;

&lt;p&gt;Our first version of building included a convert_input method in it’s public interface which implied that clients of building could send that message when in reality it would only be used internally. A quick, small improvement to this version of building is achieved by making this method private. We can also encapsulate apartments in the private interface to encourage access through buildings search methods.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Building&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:apartments&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;inversion-of-control&quot;&gt;Inversion of Control&lt;/h4&gt;

&lt;p&gt;The next question to ask ourselves is whether building’s interface is flexible and pliable to changes. A key factor is revealed if we think about what would happen if we wanted to add a new field to our apartments. If our client now required that they would like to know whether an apartment was furnished or not we could add this new field to the apartment class and modify the factory and call it a done deal.&lt;/p&gt;

&lt;p&gt;However, our building class has not been updated to include this new information and clients have no way to search through apartments that are furnished or vice versa. We would have to add yet another specific search method to building and if the fragility of this interface was not obvious before it is now.&lt;/p&gt;

&lt;p&gt;A powerful technique we can use to solve this problem is to invert control of the search functionality. Instead of programming a bulky and ever-changing public interface into building that needs to be modified for every new requirement we can utilize Ruby blocks to give control back to the client. The public interface of building exposes an enumerable of apartments that enables the client to utilize a variety of powerful functionality.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Building&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@apartments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Modify apartments here before fn call&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Check if an entire building is furnished&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;all_rooms_furnished?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;building&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:furnished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Find all apartments bigger than 3000 sq feet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bigger_than_3000_sq_ft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;building&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;apartments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Through inversion of control we have exposed a method that can accept anonymous functions that act on the apartments enumerable to clients of building. The public interface of apartment provides documentation for the parameters that are available to the client. This has drastically reduced the size of the public interface and has allowed clients to send messages to building that specify how &lt;em&gt;they&lt;/em&gt; want to receive the target apartments instead of having to deal with a predefined response. This also allows us to keep our implementation of apartments private and manipulate the apartments before calling the anonymous function passed to get if desired.&lt;/p&gt;

&lt;p&gt;These techniques can be applied to transfrom rigid classes with hidden internal dependencies into flexible, modular classes that can be passed into applications without worry. Managing dependencies and crafting flexible interfaces are two key design perspectives that will prevent an application from crystallizing into a codebase that is resistant or even impossible to change. Our software should be open to extension and closed to modification and flexible, modular code defines a path toward this goal.&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">Seemingly innocuous code can often be hiding design decisions that will only rear their ugly head as a project morphs and grows over time. When working on a class that represents apartments in a building, it is quite easy to lock your code into a myriad of strangling dependencies and a rigid interface.</summary></entry><entry><title type="html">Experimenting with the Single Responsibility Principle</title><link href="http://localhost:4000/2018/10/17/experimenting-with-the-single-responsibility-principle.html" rel="alternate" type="text/html" title="Experimenting with the Single Responsibility Principle" /><published>2018-10-17T00:00:00-04:00</published><updated>2018-10-17T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/17/experimenting-with-the-single-responsibility-principle</id><content type="html" xml:base="http://localhost:4000/2018/10/17/experimenting-with-the-single-responsibility-principle.html">&lt;p&gt;When we want to probe the real world to understand how it works we often rely on instruments that can measure with a precision that far exceeds our own subjective capabilities. We use thermometers to ascertain a numeric representation of what we would term hot or cold. When developing software we have a tool that allows us to probe our code to understand how it works. This tool is unit testing.&lt;/p&gt;

&lt;h3 id=&quot;experimental-control&quot;&gt;Experimental Control&lt;/h3&gt;

&lt;p&gt;Making good, reliable measurements requires a certain level of control over the environment in which the measurement is made. When we use a thermometer to measure the temperature of some system we expect that if the quantity we are measuring has no reason to change that our instrument should give us the same results repeatedly. In this scenario we rely on the systems ability to hold other factors like the pressure and volume constant, so that we can be sure that our result is true and replicatable.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;quick-aside-temperature-pressure-and-volume-are-seperate-quantities-that-nonetheless-affect-on-one-another&quot;&gt;Quick Aside: Temperature, Pressure, and Volume are seperate quantities that nonetheless affect on one another.&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, if our system was not designed with the single responsibility of managing heat but was also responsible for managing pressure, painful implications become apparent if we ever decide to change how the system manages these quantities. If we asked our system to accept and manage a certain amount of heat, and we have left the mechanisms by which it does so intact, we would expect a measurement now to be the same as a measurement later. However, if without our knowledge someone (or a naive version of us at a different time) changed the mechanisms that manage the pressure of the system in between measurements our thermometer would show us two completely different temperatures. This crisis of measurement has multiple implications that are important to consider when designing systems.&lt;/p&gt;

&lt;h3 id=&quot;unit-tests-and-srp&quot;&gt;Unit Tests and SRP&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Changes to one responsibility may impair or inhibit the class’ ability to meet the others.
&lt;strong&gt;Sandi Metz&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A major problem that has been noted by many, notably by Uncle Bob in his article on &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;The Single Responsibility Principle&lt;/a&gt; shows us how coupling different responsibilities that are likely to change in a single class leads us to a rigid, static codebase. We are fearful that changes to one responsibility in a class could collapse the operation of other responsibilities and this fear prevents useful change. However, there is another potential and notable outcome. If our thermometer tells us two different measurements and we have not altered the mechanisms that manage heat, we lose faith in our thermometer. We may give up on the tool’s ability to probe the behavior of the system and simply tinker with the system until it generally does what we want. When working on software, this is the moment where we abandon our testing suite and just throw code at the wall until the system ‘works.’&lt;/p&gt;

&lt;p&gt;Part of the reason that the SRP is a cornerstone of good system design is that it allows us to place faith in our tests. It isolates behavior in well defined modules where our thermometer only returns different results when we make visible changes to how the system manages heat. And if we want to tinker with the system and build a more efficient heat manager, we can trust our thermometer when it tells us that our system stayed the same temperature. The SRP provides confidence in our testing suite.&lt;/p&gt;

&lt;h3 id=&quot;seperate-concerns&quot;&gt;Seperate Concerns&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;We want to increase the cohesion between things that change for the same reasons, and we want to decrease the coupling between those things that change for different reasons.
&lt;strong&gt;Uncle Bob&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Learning to isolate change provided humanity with the scientific revolution when applied to create the experimental method. We now had a powerful tool to probe the behavior of nature and be confident that we could &lt;em&gt;replicate&lt;/em&gt; our results. The SRP teaches us the same lesson when applied to our code; we can test with confidence and communicate changes clearly. We just have to be responsible.&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">When we want to probe the real world to understand how it works we often rely on instruments that can measure with a precision that far exceeds our own subjective capabilities. We use thermometers to ascertain a numeric representation of what we would term hot or cold. When developing software we have a tool that allows us to probe our code to understand how it works. This tool is unit testing.</summary></entry><entry><title type="html">Minimize Assumptions - Simple Design &amp;amp; SOLID</title><link href="http://localhost:4000/2018/10/04/minimize-assumptions.html" rel="alternate" type="text/html" title="Minimize Assumptions - Simple Design &amp; SOLID" /><published>2018-10-04T00:00:00-04:00</published><updated>2018-10-04T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/04/minimize-assumptions</id><content type="html" xml:base="http://localhost:4000/2018/10/04/minimize-assumptions.html">&lt;hr /&gt;
&lt;p&gt;This blog post assumes familiarity with Conway’s Game of Life.&lt;/p&gt;

&lt;p&gt;While reading The Four Rules of Simple Design (FRSD) a pattern emerges across several of the examples that seemed to sit at a crossroads between simple design and SOLID principles. I will refer to this pattern as ‘minimize assumptions’ and I believe it is an important sub-component of writing easily extensible code.&lt;/p&gt;

&lt;h3 id=&quot;duplication-of-knowledge-about-topology&quot;&gt;Duplication of Knowledge about Topology&lt;/h3&gt;

&lt;p&gt;The first encounter that displays how assumptions can harm our code quality appears in the “Duplication of Knowledge about Topology” example in FRSD. Here, a set_living_at method has been implemented on the World class to set a living cell to a specific coordinate in the game world.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;World&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_living_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Better get flat&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, we discover that the coordinates dimensionality has been hard coded into the method as well as all cell types that need access to said coordinates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LivingCell&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 'Cause there ain't no going back&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadCell&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What immediately follows is a limitation on our ability to extend the code in an interesting and perhaps desirable manner.&lt;/p&gt;

&lt;p&gt;By making a strong assumption about the dimensionality of our world’s representation, we have removed the ability to easily extend our code to handle not just 3-dimensions (which could be extremely visually interesting) but any number of higher dimensions. This assumption would have spread like a virus throughout our codebase as well, with all cell types making the same strong assumption and producing a codebase that disregards the Open Closed principle and disallows interesting extensions to our project without significant modification. This virus-like decision could potentially be deeply embedded within our code, affecting everything from how we check a location’s neighbors to how we define the parameters that govern the logic of the game.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleCell&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neighbors&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Have fun modifying this method&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By removing this assumption we can avoid situations such as hardcoding values like ‘2’ and ‘3’ into the game logic that dictates the neighboring cell rules for life and death and allow these values to be dynamically decided by the client when they choose their desired game dimensionality.&lt;/p&gt;

&lt;p&gt;Haines suggests a solution that generalizes x and y coordinates to the concept of a class that is readily swappable with locations classes of different dimensionality.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Location&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neighbors&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Calculate neighbor stuffs&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;World&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_living_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Ayy I could be any dimensionality!&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleCell&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:location&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Virus eradicated&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This immediately creates a richer, more extensible codebase that can be used to build all new Game of Lifes with different behavior, parameters, and potential visuals when rendered.&lt;/p&gt;

&lt;h3 id=&quot;dont-have-tests-depend-on-previous-tests&quot;&gt;Don’t Have Tests Depend on Previous Tests&lt;/h3&gt;

&lt;p&gt;The second encounter with problematic assumptions occurs in the “Don’t Have Tests Depend on Previous Tests” example. This example is meant to elucidate how creating dependencies between our tests can lead to a fragile testing suite, but I believe it also illustrates the broader potential mistake of making an assumption. The issue begins in an initial test to check if a new world is empty when constructed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_a_new_world_is_empty&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;assert_true&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# I declare new worlds to be empty, peasants.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A subsequent behavioral test is then implemented to check that after the game state is updated a single time, an empty world stays empty. The crux of the issue is that this second test creates a new world, updates the game state, and then checks if the world is still empty.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_an_empty_world_stays_empty_after_a_tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Says who?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And therein lies the problem; an assumption has been made that a new world is created empty. Should we choose to alter this design in the future and initially construct non-empty worlds, this test will mysteriously fail and display the fragile test coverage our unnecessary assumption has caused. By minimizing assumptions and realizing that we can drive our code with TDD, we can employ a builder pattern that provides a method for creating and returning an empty world without any dependencies on our initial configuration, thus strengthening our testing suite.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_an_empty_world_stays_empty_after_a_tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# No worldly assumptions up in here&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;procedural-polymorphism&quot;&gt;Procedural Polymorphism&lt;/h3&gt;

&lt;p&gt;The third and final encounter I discovered that elucidates how minimizing assumptions can create higher quality, more extensible code occurs in the “Procedural Polymorphism” example. Up until this point, a cell class has been implemented that uses an if-else branch to execute different behavior based on the ‘alive’ status of the cell.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alive_in_next_generation?&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# You're either alive. Or you ain't. Make up your mind!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stable_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;genetically_fertile_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And once again this code makes a strong assumption about the nature of the game that has the same effect of limiting our ability to extend the code with interesting and potentially desirable features.&lt;/p&gt;

&lt;p&gt;Haines initial attempt to remedy this is to use a state property that can take on values of ‘alive’ or ‘dead’ but this leads us to the same limitations that hard coding coordinates into our world and cells hit earlier.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alive_in_next_generation?&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ALIVE&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# I said it once. I won't say it again.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stable_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEAD&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;genetically_fertile_neighborhood?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By utilizing hard coded strings we have eliminated the potential to easily extend our game with new and potentially game altering cell types that we may want to implement to create a richer, more varied Game of Life. Haines uses the Zombie Cell as an example but I leave it to the imagination to think of how introducing new cell types with their own sets of rules could create novel forms of the Game of Life that could produce potentially beautiful animations and static constructs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AsexualCell&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alive_in_next_generation?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# I don't need no friends, they're all in my head.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By utilizing the idea of inverted composition introduced in the “Inverted Composition as a Replacement for Inheritance” example, we can create a codebase that is readily extensible so that we may experiment with a variety of different cells and their emergent interactions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Location&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cell&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LivingCell&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stays_alive?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadCell&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;comes_to_life?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_of_neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;irl-tic-tac-toe&quot;&gt;IRL: Tic Tac Toe&lt;/h3&gt;

&lt;p&gt;The inadvertant decision to minimize assumptions naturally appeared when writing my first Tic Tac Toe application. Early on I made the decision to not include any explicit hard coded boards into my source code. This decision lead me to use for-loops with different starting and ending points, and increment values to check for horizontal, diagonal, and vertical wins.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Yay abstraction, rows, columns, and diagonals can all use this method&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkRowsForWin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Without knowing it at the time, I had minimized the assumptions I made about the games format. Later on, when tempted out of curiosity to add the option to play 4x4 and 5x5 tic tac toe boards to flex the alpha beta algorithm a bit (which failed until the magic of memoization, another post for another time,) I found that because my game logic was decoupled from assumptions about its format, implementing this feature was as simple as asking the user to choose a board size.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Simple design allows small changes to implement powerful new features without modifying existing code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that’s the whole point. By following the Four Rules of Simple Design from the start and minimizing assumptions between classes, extending the codebase became easier. Simple design allows small changes to implement powerful new features without modifying existing code. Solid and simple were best friends all along!&lt;/p&gt;</content><author><name>Christopher Manahan</name></author><summary type="html">This blog post assumes familiarity with Conway’s Game of Life.</summary></entry></feed>